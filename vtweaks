#!/system/bin/sh
# Copyright (C) 2016 veez21
# vTweaks Reborn Series
ver="Reborn v1"   # Version Name, must be updated regularly
build="20161009"
######Changeable Value, change it if u like, 0 and 1.###### 

# Verbose is like a logging mech to view what's really happening.
verbose=0

################################

id="$(id)" 
id="${id#*=}" 
id="${id%%\(*}" 
id="${id%% *}"  # used in checkin root

# I will know if you're using Null kernel
nullkernel=0
if uname -r | grep null >/dev/null
then
nullkernel=1  # will be used in later versions, as of now, it's still an idea ;)
fi


core="/system/etc/vTweaks"
dir=$(dirname $0)
name=$(basename $0)
file="$dir/$name"
conf="$core/etc/vTweaks.cfg"

if [ "$id" != "root" ] && [ "$id" != "0" ]; then echo "Not Running as root, type su before $name"
exit
fi

mount -o remount,rw rootfs
mount -o rw,remount,noatime,nodiratime /system
updater=$(grep build $conf 2>/dev/null | cut -d= -f2 2>/dev/null)
if [ "$updater" -lt "$build" ]; then
echo "Updating vTweaks"
sleep 2
rm -rf $core # yeah, that's all
#sed -i "s/updater=.*/updater=0/g" $conf
fi
if [ ! -e /system/etc/vTweaks ]; then
mkdir /system/etc/vTweaks
fi
if [ ! -e /system/etc/vTweaks/etc ]
then mkdir /system/etc/vTweaks/etc; fi
if [ ! -e /system/etc/vTweaks/etc/vTweaks.cfg ]; then
touch /system/etc/vTweaks/etc/vTweaks.cfg
echo "performance=1
battery=1
net=1
flagtuner=1
build=$build" > /system/etc/vTweaks/etc/vTweaks.cfg
fi

chmod -R 755 $core

check () {   # check status 

performance=$(cat $conf | grep performance | cut -d= -f2)
battery=$(cat $conf | grep battery | cut -d= -f2) 
net=$(cat $conf | grep net | cut -d= -f2)
flagtuner=$(cat $conf | grep flagtuner | cut -d= -f2)
bootcount=$(grep bootcount $conf | cut -d= -f2)
}

boost () {
mount -o remount,rw /data
mount -o remount,rw rootfs

#->RAM Free Identification
free_process () {
REALFREE=$(cat /proc/meminfo | grep MemFree | awk '{print $2}')
FREE=$(($REALFREE / 1024))
FULL=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')
OCCUPIED=$(($FULL - $REALFREE))
CRITICAL=$(($FULL / 100 * 93))
HEALTHY=$(($FULL / 100 * 50))
MODERATE=$(($FULL / 100 * 77))

if [ $OCCUPIED -gt $CRITICAL ]; then
     CFREE="\e[0;31m$FREE\e[00;37;40m"
else
     CFREE="\e[0;32m$FREE\e[00;37;40m"
fi
}

free_process

#->RAM Usage Classification
ram_usage () {
if [ $OCCUPIED -lt $HEALTHY ]; then    #->Healthy
RSTAT="\e[0;32mHealthy\e[00;37;40m"
LVL="1"
elif [ $OCCUPIED -lt $MODERATE ]; then #->Moderate
RSTAT="\e[0;33mModerate\e[00;37;40m"
LVL="2"
elif [ $OCCUPIED -lt $CRITICAL ]; then #->Bad
RSTAT="\e[0;31mBad\e[00;37;40m"
LVL="3"
elif [ $OCCUPIED -gt $CRITICAL ]; then #->Critical
RSTAT="\e[0;35mCritical\e[00;37;40m"
LVL="4"
fi
}

ram_usage

#->Main Boost Script
clear
sleep 1
echo "'BOOST' your device
by dropping caches to free up RAM."
echo "It also kills 'mediaserver' to save battery.
(It may interrupt your Music Player when playing music)";
sleep 2
echo " ";
echo "Current Free: $CFREE MiB";
echo "$FREE" > /data/data/free1
echo "Ram Usage: $RSTAT"
sleep 1

#->Skips Boosting if RAM Usage is Healthy
if [ $LVL = 1 ]; then
	echo "";
	echo "Your Ram Usage is $RSTAT.
	There is no need to free up RAM."
	sleep 2
	exit

else

echo "";
echo -n "Boosting"
sync
sleep 1 
echo -n "."
echo "3" > /proc/sys/vm/drop_caches;
sleep 1 
echo -n "."
echo "2" > /proc/sys/vm/drop_caches;
sleep 1 
echo -n "."
echo ""
echo "1" > /proc/sys/vm/drop_caches;
sleep 1
echo "3" > /proc/sys/vm/drop_caches;
sleep 1
echo ""

#->Kill MediaServer
killall -9 android.process.media 2>/dev/null
killall -9 mediaserver 2>/dev/null

free_process
ram_usage

echo "Current Free: $CFREE MiB";
echo "$FREE" > /data/data/free2
echo "Ram Usage: $RSTAT"
echo ""

FREE1=$(cat /data/data/free1)
FREE2=$(cat /data/data/free2)
TOTAL=$(($FREE2 - $FREE1))

sleep 1
if [ "$TOTAL" = "0" ]; then
	echo "Freed up \e[0;31m$TOTAL MiB\e[00;37;40m."
	if [ "$TOTAL" -lt "0" ]; then
		echo "Freed up \e[0;31m$TOTAL MiB\e[00;37;40m."
	fi
else
	echo "Freed up \e[0;32m$TOTAL MiB\e[00;37;40m."
fi

if [ "$TOTAL" -gt "0" ]; then
	echo "Successfully boosted your device"
else
	echo "\e[0;31mUnsuccessful. Nothing can be freed.\e[00;37;40m"
fi

rm /data/data/free1 2>/dev/null
rm /data/data/free2 2>/dev/null

fi;
}

setdb() {     # idea/originally by sonickles9, thanks
conf="$core/etc/vTweaks.cfg"
ex=$(cat $conf | grep $1)
if [ -z $ex ]; then
echo "$1=$2" >> $conf
else
sed -i "s/${1}=.*/${1}=${2}/g" $core/etc/vTweaks.cfg
fi
}

uninstall() {
echo -n "Uninstalling"
sleep 1
rm -rf /system/etc/vTweaks
echo -n "."
sleep 1
rm $file
echo -n "."
rm /system/etc/init.d/00-7veez21 >/dev/null
rm /sdcard/vTweaks.log
rm /system/bin/boost 2>/dev/null
echo -n "."
sleep 1
echo "Done! Please reboot to completely remove the tweaks."
exit
}

#  Tweaks are HERE!! ======================

performance() {
setprop persist.service.lgospd.enable 0
setprop persist.service.pcsync.enable 0
setprop ro.HOME_APP_ADJ 1
setprop hw3d.force 1
setprop hw2d.force 1
setprop debug.performance.tuning 1
setprop video.accelerate.hw 1
setprop persist.sys.purgeable_assets 1
setprop debug.egl.hw 1
setprop debug.composition.type gpu
setprop persist.sys.composition.type gpu
setprop ro.fb.mode 1
setprop debug.sf.fb_always_on 1
setprop ro.max.fling_velocity 12000
setprop ro.min.fling_velocity 8000
setprop debug.qc.hardware true
setprop persist.sys.scrollingcache 3
setprop ro.config.disable.hw_accel false
setprop com.qc.hardware true
setprop touch.pressure.scale 0.001
setprop persist.sys.ui.hw 1
setprop ro.product.gpu.driver 1
setprop debug.hwui.render_dirty_regions false
setprop hwui.disable_vsync true
setprop hwui.render_dirty_regions false
setprop debug.qctwa.preservebuf 1
setprop debug.qctwa.statusbar 1
setprop ro.config.hw_quickpoweron true
setprop persist.sys.shutdown.mode hibernate
setprop windowsmgr.max_events_per_ser 90

echo "2048" > /proc/sys/kernel/random/read_wakeup_threshold
echo "2048" > /proc/sys/kernel/random/write_wakeup_threshold


if [ -e /system/lib/egl/egl.cfg ]; then
	if [ ! -e /system/lib/egl/egl.cfg.bak ]; then
		cp /system/lib/egl/egl.cfg /system/lib/egl/egl.cfg.bak
		$bb sed -i '/0 0 android/d' /system/lib/egl/egl.cfg
		if [ -e /system/lib/egl/libGLES_android.so ]; then
			$bb mv /system/lib/egl/libGLES_android.so /system/lib/egl/libGLES_android.so.bak
		fi;
	fi
fi

# used by this script, no effect at all but is necessary
setprop vtweaks.performance done

}

battery() {
setprop ro.com.google.networklocation 0
setprop debugtool.anrhistory 0
setprop ro.config.hw_power_saving 1
setprop profiler.force_disable_err_rpt 1
setprop profiler.force_disable_ulog 1
setprop power_supply.wakeup enable
setprop power.saving.mode 1
setprop persist.radio.ramdump 0
setprop persist.radio.add_power_save 1
setprop ro.com.google.locationfeatures 0
setprop hwui.render_dirty_regions false
setprop debug.hwui.render_dirty_regions false
setprop pm.sleep_mode 1 
setprop vidc.debug.level 0
setprop ro.fb.mode 1
setprop debug.sf.fb_always_on 1
setprop debug.gralloc.map_fb_memory 0
setprop ro.ril.disable.power.collapse 0
setprop dalvik.vm.checkjni false
setprop ro.kernel.android.checkjni 0
setprop dalvik.vm.deadlock-predict off
setprop dalvik.vm.check-dex-sum off  
setprop dalvik.vm.debug.alloc 0
setprop dalvik.vm.execution-mode int:jit

echo "2" > /proc/sys/vm/laptop_mode

if [ $(cat /sys/class/power_supply/battery/capacity) = "100" ]; then
	rm -f /data/system/batterystats.bin
fi

if [ -e /sys/kernel/fast_charge/force_fast_charge ]; then
	echo "1" > /sys/kernel/fast_charge/force_fast_charge
fi

svc power stayon false

DL="/sys/module/*"
for v in $DL
do
if [ -e $n/parameters/debug_mask ]; then
echo "0" > $v/parameters/debug_mask
fi
done

setprop vtweaks.battery done

}

net() {
setprop ro.config.hw_fast_dormancy 1
setprop persist.cust.tel.eons 1
setprop ro.ril.hep 0
setprop ro.ril.gprsclass 12
setprop ro.ril.hsdpa.category 8
setprop ro.ril.hsupa.category 6
setprop ro.ril.enable.sdr 1
setprop ro.ril.enable.gea3 1
setprop ro.ril.enable.a52 0
setprop ro.ril.enable.a53 0
setprop ro.ril.enable.dtm 0

setprop net.tcp.buffersize.default 6144,87380,110208,6144,16384,110208
setprop net.tcp.buffersize.wifi 262144,524288,1048576,262144,524288,1048576
setprop net.tcp.buffersize.lte 262144,524288,3145728,262144,524288,3145728
setprop net.tcp.buffersize.hsdpa 6144,262144,1048576,6144,262144,1048576
setprop net.tcp.buffersize.evdo_b 6144,262144,1048576,6144,262144,1048576
setprop net.tcp.buffersize.umts 6144,87380,110208,6144,16384,110208
setprop net.tcp.buffersize.hspa 6144,87380,262144,6144,16384,262144
setprop net.tcp.buffersize.gprs 6144,8760,11680,6144,8760,11680
setprop net.tcp.buffersize.edge 6144,26280,35040,6144,16384,35040

setprop net.rmnet0.dns1 8.8.8.8
setprop net.rmnet0.dns2 8.8.4.4
setprop net.dns1 8.8.8.8
setprop net.dns2 8.8.4.4

setprop vtweaks.net done

}

#media () {} #commented out!! i don't really find this working

flagtuner() {
setprop ENFORCE_PROCESS_LIMIT false
setprop MAX_SERVICE_INACTIVITY false
setprop MAX_HIDDEN_APPS false
setprop MIN_HIDDEN_APPS false
setprop CONTENT_APP_IDLE_OFFSET false
setprop EMPTY_APP_IDLE_OFFSET false
setprop MAX_ACTIVITIES false
setprop ACTIVITY_INACTIVITY_RESET_TIME false
setprop MAX_RECENT_TASKS false
setprop MIN_RECENT_TASKS false
setprop APP_SWITCH_DELAY_TIME false
setprop MAX_PROCESSES false
setprop PROC_START_TIMEOUT false
setprop CPU_MIN_CHECK_DURATION false
setprop GC_TIMEOUT false
setprop SERVICE_TIMEOUT false
setprop MIN_CRASH_INTERVAL false

setprop vtweaks.flagtuner done

}

remount() {
# gotta use busybox
for v in $(busybox mount | grep relatime | cut -d " " -f3);
do
busybox mount -o noatime,nodiratime,remount $v;
done;

for v in $(busybox mount -t ext4 | cut -d " " -f3);
do
busybox mount -o noatime,nodiratime,remount,rw,discard,barrier=0,commit=80,noauto_da_alloc,delalloc $v;
done;

setprop vtweaks.remount done

}

clean() {
busybox rm -f /data/log/* >/dev/null
busybox rm -f /data/*.log >/dev/null
busybox rm -f /data/tombstones/* >/dev/null
busybox rm -f /data/system/dropbox/* >/dev/null
busybox rm -f /cache/*.log >/dev/null
busybox rm -f /storage/sdcard0/LOST.DIR/* >/dev/null
busybox rm -f /storage/sdcard1/LOST.DIR/* >/dev/null
busybox rm -f /data/system/usagestats/* >/dev/null
busybox rm -f /data/anr/* >/dev/null
busybox rm -f /cache/*.apk >/dev/null
busybox rm -f /cache/*.tmp >/dev/null
busybox rm -f /data/dalvik-cache/*.apk >/dev/null
busybox rm -f /data/dalvik-cache/*.tmp >/dev/null
busybox rm -f /data/data/*/cache/* >/dev/null
busybox rm -f /data/clipboard/* >/dev/null
busybox rm -f /dev/log/main/* >/dev/null
busybox rm -f /data/mlog/* >/dev/null
busybox rm -f /data/backup/pending/* >/dev/null
busybox rm -f /data/cache/*.* >/dev/null
busybox rm -f /data/local/tmp/* >/dev/null
busybox rm -f /data/last_alog >/dev/null
busybox rm -f /data/last_kmsg >/dev/null

}

trim() {
for ext4 in $(busybox mount -t ext4 | cut -d " " -f3)
do
busybox fstrim -v $ext4
done

}


execute() {
check
if [ "$performance" = "1" ]; then performance; fi
if [ "$battery" = "1" ]; then battery; fi
if [ "$net" = "1" ]; then net; fi
if [ "$flagtuner" = "1" ]; then flagtuner; fi
clean
trim
remount

rm /sdcard/vTweaks.log >/dev/null

if getprop | grep vtweaks
then 
getprop | grep vtweaks | tee -a /sdcard/vTweaks.log
echo "Everything went well. You're good to go!
$(date)" | tee -a /sdcard/vTweaks.log
else echo "No tweaks are applied. Check your activated tweaks by using Terminal Emulator and typing $name.
$(date)" | tee -a /sdcard/vTweaks.log
fi

exit
}

menu() {
line=$(busybox printf '%*s\n' "${COLUMNS:-$columns}" '' | tr ' ' -)
line2=$(busybox printf '%*s\n' "${COLUMNS:-$columns}" '' | tr ' ' =) # thanks sonickles9, for this
G='\e[1;32m'
R='\e[1;31m'
N='\e[00;37;40m'
Y='\e[1;33m'
B='\e[1;34m'
V='\e[1;35m'
Bl='\e[1;30m'
C='\e[1;36m'


check # check regularly

clear
echo $line2
echo "${B}vTweaks $ver${N}"
echo $line2
sleep 1
if [ -e /system/etc/init.d/00-7veez21 ]
then
echo "Apply on Boot: ${C}YES${N}"
else
echo "Apply on Boot: ${Bl}NO${N}"
fi
echo $line
if [ "$performance" = "1" ]; then
echo "1) ${G}Performance${N}"
else
echo "1) ${R}Performance${N}"
fi
if [ "$battery" = "1" ]; then
echo "2) ${G}Battery${N}"
else
echo "2) ${R}Battery${N}"
fi
if [ "$net" = "1" ]; then
echo "3) ${G}Net Speed${N}"
else
echo "3) ${R}Net Speed${N}"
fi
if [ "$flagtuner" = "1" ]; then
echo "4) ${G}FlagTuner${N}"
else
echo "4) ${R}FlagTuner${N}"
fi
echo $line
echo "${Y}h${N}) Help"
echo "${Y}a${N}) Set MOD to run on boot"
echo "${Y}r${N}) Refresh list
${Y}b${N}) Boost now
${Y}c${N}) Clean now
${Y}t${N}) Trim now
${Y}o${N}) Remount now
${R}u${N}) Uninstall"
echo $line
echo "0) Exit"
echo $line2
echo -n "[CHOICE]: "
read me
case $me in
1) echo $me; sleep 1
if [ "$performance" = "0" ]; then
performance
setdb performance 1
else
setdb performance 0
fi
menu
;;
2) echo $me; sleep 1
if [ "$battery" = "0" ]; then
battery
setdb battery 1
else
setdb battery 0
fi
menu
;;
3) echo $me; sleep 1
if [ "$net" = "0" ]; then
net
setdb net 1
else
setdb net 0
fi
menu
;;
4) echo $me; sleep 1
if [ "$flagtuner" = "0" ]; then
flagtuner
setdb flagtuner 1
else
setdb flagtuner 0
fi
menu
;;
h|H) echo $me; clear
echo $line
echo "${G}Performance Tweaks${N} :
---Performance tweaks are applied to improve the overall responsiveness and speed of the ui and other things such as gaming."
echo $line
echo "${G}Battery Tweaks${N} :
---Battery tweaks are applied to possibly improve battery life with less impact in performance. However, this does not mean that your battery life will improve exponentially."
echo $line
echo "${G}Net Tweaks${N} :
---Net tweaks are applied to improve net speeds. It's that simple."
echo $line
echo "${G}FSTrim${N} :
---Trims device Partitions to reduce r/w lags and improves performance."
echo $line
echo "${G}Partition Remount${N} :
---Remounts Partitions to improve performance and save some battery life."
echo $line
echo -n "Press any key to go back"
stty cbreak -echo
k=$(dd bs=1 count=1 2>/dev/null)
stty -cbreak echo
menu
;;
c) echo $me; sleep 1
clear
echo "Cleaning"
sleep 0.3
clean 2>/dev/null
echo "
Done. Don't mind the errors if there's any"
sleep 2
menu
;;
t) echo $me; sleep 1
clear
echo "Trimming:"
sleep 0.3
trim
sleep 2
menu
;;
o) echo $me; sleep 1
clear
remount
echo "
Done. Don't mind the errors of there's any"
sleep 2
menu
;;
b) clear
boost
sleep 1
menu
;;
a|A) clear

if [ -e /system/etc/init.d/00-7veez21 ]; then
echo "Already set on boot. 'x' to unset, press enter to go back"
stty cbreak -echo
k=$(dd bs=1 count=1 2>/dev/null)
stty -cbreak echo
case $k in
x) rm /etc/init.d/00-7veez21
menu
;;
*) menu
;;
esac
fi
echo "Setting OnBoot"
sleep 1
echo "#!/system/bin/sh
# vTweaks Server

mount -o remount,rw rootfs
mount -o remount,rw /system
chmod 755 $file
$file -a
" > /system/etc/init.d/00-7veez21
chmod 755 /system/etc/init.d/00-7veez21
chown 0.0 /system/etc/init.d/00-7veez21
menu
;;
r) menu
;;
u) clear
echo -n "Are you sure? [Y/N]:"
stty cbreak -echo 
d=$(dd bs=1 count=1 2>/dev/null)
stty -cbreak echo
case $d in
y|Y|yes|Yes|YES) uninstall
;;
n|N|no|No|NO|nO) menu
;;
*)menu
;;
esac

;;
0) clear; exit
;;
*) echo "${R}$me${N} Not recognized"
sleep 1
menu
;;
esac

}

until [[ "$1" != "-a" ]] && [[ "$1" != "--start" ]] && [[ "$1" != "-x" ]] && [[ "$1" != "--stop" ]] && [[ "$1" != "--help" ]] && [[ "$1" != "--boost" ]] && [[ "$1" != "-mb" ]] && [[ "$1" != "--mkboost" ]] && [[ "$1" != "-ver" ]] && [[ "$1" != "--clean" ]] && [[ "$1" != "--trim" ]]
do

if [ "$1" = "-a" ] || [ "$1" = "--start" ]
then

if [ "$verbose" != "0" ]
then set -x
fi

execute
elif [ "$1" = "-x" ] || [ "$1" = "--stop" ]
then
#killall $(pgrep $0)
rm /system/etc/init.d/00-7veez21 >/dev/null
echo "Reboot Now to completely disable"
exit
exit
elif [ "$1" = "--help" ]
then
echo "vTweaks $ver
Copyright (C) 2016 veez21

vTweaks is a Performance enhancing script that is full of tweaks!

Usage: $name -a | --start
               -x | --stop
               -mb | --mkboost
               --boost
               --trim
               --clean
               --help
               -ver
"
exit
elif [ "$1" = "--boost" ]
then boost
exit
elif [ "$1" = "--trim" ]
then trim
exit
elif [ "$1" = "--clean" ]
then clean 
exit
elif [ "$1" = "-mb" ] || [ "$1" = "--mkboost" ]
then
echo "This makes a boost script to free up RAM. All you have to do then is type in Terminal Emulator 'boost'."
echo "#!/system/bin/sh
# vTweaks
# Boost script

$file --boost
" > /system/bin/boost
chmod 755 /system/bin/boost
chown 0.0 /system/bin/boost
exit
elif [ "$1" = "-ver" ]
then echo "vTweaks $ver

CREDITS: @hoholee12 - for his sched_tuner (inspiration)
         @sonickles9 - for his bash prowess and tricks
         @Paget96 - i used some of his tweaks
         @pizza_dox - for FlagTuner
         All the guys in XDA"
exit
           
else
ui=1
fi

done

menu   # yeah, this calls out the menu 





###--CHANGELOG---###
# REBORN
# ->v1 - initial release
#      - stable (initial and stable, how cool is that!)
#      - removed placebo tweaks
#      - added new tweaks
#      - guess what? brand new, advanced, smaller size, and much better script structure.
#      - completely built from scratch and in mah phone(that's right, i didn't use a pc)



